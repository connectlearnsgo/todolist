* 20240606
** Routing Requests in Go
*** RESTful Routes Overview
- We are building an HTML-based site using RESTful principles.
- Define routes for creating, reading, updating, and deleting resources.

*** Example Code for Routing
- *Main Function Setup:*
  ```go
  func main() {
      mux := http.NewServeMux()
      mux.HandleFunc("/", showHome)
      mux.HandleFunc("/todos/", handleTodos)
      mux.HandleFunc("/todos", handleTodos)
      // mux.HandleFunc("/todos/", showTodoEdit)
      log.Fatal(http.ListenAndServe(":8080", mux))
  }
  ```

*** Defining RESTful Routes

**Home Route**

Handler:
```go
func showHome(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Hi Everybody!")
}
```
Router Definition:
```go
mux.HandleFunc("/", showHome)
```
CURL Call:
```bash
curl http://localhost:8080/
```

2. **Show All Todos Route**

Handler:
```go
func showTodos(w http.ResponseWriter, r *http.Request) {
    for _, list := range lists {
        fmt.Fprintf(w, "%s\n", list.Name)
    }
}
```
Router Definition:
```go
mux.HandleFunc("/todos", handleTodos)
```
CURL Call:
```bash
curl http://localhost:8080/todos
```

3. **Show Specific Todo Route**

Handler:
```go
func showTodo(w http.ResponseWriter, r *http.Request) {
    idStr := strings.TrimPrefix(r.URL.Path, "/todos/")
    id, _ := strconv.Atoi(idStr)
    if id < len(lists) {
        fmt.Fprintf(w, "%v", lists[id])
    } else {
        http.Error(w, "List not found", http.StatusNotFound)
    }
}
```
Router Definition:
```go
mux.HandleFunc("/todos/", handleTodos)
```
CURL Call:
```bash
curl http://localhost:8080/todos/{id}
```

4. **Create Todo Route**

Handler:
```go
func createTodo(w http.ResponseWriter, r *http.Request) {
    name := r.FormValue("name")
    list := List{
        Name: name,
    }
    lists = append(lists, list)
    fmt.Fprintf(w, "List created: %s\n", list.Name)
}
```
Router Definition:
```go
mux.HandleFunc("/todos", handleTodos)
```
CURL Call:
```bash
curl -X POST -d "name=NewTodo" http://localhost:8080/todos
```

5. **Update Todo Route**

Handler:
```go
func updateTodo(w http.ResponseWriter, r *http.Request) {
    idStr := strings.TrimPrefix(r.URL.Path, "/todos/")
    id, _ := strconv.Atoi(idStr)
    if id < len(lists) {
        lists[id].Name = r.FormValue("name")
        http.Redirect(w, r, fmt.Sprintf("/todos/%d", id), http.StatusSeeOther)
        return
    }
    http.Error(w, "List not found", http.StatusNotFound)
}
```
Router Definition:
```go
mux.HandleFunc("/todos/", handleTodos)
```
CURL Call:
```bash
curl -X PUT -d "name=UpdatedTodo" http://localhost:8080/todos/{id}
```

*** Dispatching Requests in handleTodos

The `handleTodos` function is a middleware that handles the routing for `/todos` and `/todos/:id` based on the HTTP method (GET, POST, PUT) and the path. 

If the path is not `/`, it means that the request is for a specific todo list (e.g., `/todos/1`). In this case, it checks the HTTP method and calls the appropriate function (`showTodo` for GET and `updateTodo` for PUT).

If the path is `/`, it means that the request is for all todo lists. In this case, it checks the HTTP method and calls the appropriate function (`showTodos` for GET and `createTodo` for POST).

If the HTTP method is not GET, POST, or PUT, it returns an HTTP 405 Method Not Allowed error.

*** Dispatching Routes
- We use `http.ServeMux` to route requests to the appropriate handler functions.
- Each handler function will be responsible for a specific route and HTTP method.

*** Testing Routes with curl
- *Home Page*
  - ```sh
    curl http://localhost:8080/
    ```

- *List All To-Do Lists*
  - ```sh
    curl http://localhost:8080/todos
    ```

- *Show a Specific To-Do List*
  - ```sh
    curl http://localhost:8080/todos/1
    ```

- *Create a New To-Do List*
  - ```sh
    curl -X POST -d "name=New List" http://localhost:8080/todos
    ```

- *Edit a To-Do List*
  - ```sh
    curl -X POST -d "name=Updated List" http://localhost:8080/todos/1/edit
    ```

- *Delete a To-Do List*
  - ```sh
    curl -X POST http://localhost:8080/todos/1/delete
  ```

*** Customizing HTTP Headers
- Customize HTTP headers to control various aspects of the response.
- We can set headers such as `Content-Type`, `Cache-Control`, etc.

- *Setting Content-Type Header*
  - *Code Snippet:*
    ```go
    func showHome(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Content-Type", "text/html; charset=utf-8")
        // Implement the rest of the handler here
    }
    ```

- *Setting Cache-Control Header*
  - *Code Snippet:*
    ```go
    func listTodos(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate")
        // Implement the rest of the handler here
    }
    ```

*** Query Strings
- Query strings are a way to pass data to the server as part of a URL.
- They are commonly used for filtering, searching, and pagination in web applications.

- *Parsing Query Strings*
  - *Code Snippet:*
    ```go
    func listTodos(w http.ResponseWriter, r *http.Request) {
        query := r.URL.Query()
        id := query.Get("id")
        // Implement the rest of the handler here
    }
    ```
  - *Testing with curl*
    ```sh
    curl http://localhost:8080/todos?id=123
    ```

- *Accessing Multiple Values*
  - *Code Snippet:*
    ```go
    func listTodos(w http.ResponseWriter, r *http.Request) {
        query := r.URL.Query()
        tags := query["tag"]
        // 'tags' is now a slice containing all 'tag' values
        // Implement the rest of the handler here
    }
    ```
  - *Testing with curl*
    ```sh
    curl http://localhost:8080/todos?tag=important
    ```

- *Working with Query Parameters*
  - *Code Snippet:*
    ```go
    func listTodos(w http.ResponseWriter, r *http.Request) {
        query := r.URL.Query()
        page := query.Get("page")
        limit := query.Get("limit")
        // Use 'page' and 'limit' parameters for pagination
        // Implement the rest of the handler here
    }
    ```
  - *Testing with curl*
    ```sh
    curl http://localhost:8080/todos?page=2&limit=10
    ```

*** Using io.Writer and Fprintf
- The `Fprintf` function in the `io` package allows us to format and write data to any `io.Writer` interface.
- It provides a flexible way to generate formatted output, which can be useful for writing to different destinations such as files, network connections, or HTTP responses.

- *Writing Formatted Data*
  - *Code Snippet:*
    ```go
    package main

    import (
        "fmt"
        "net/http"
        "io"
    )

    func handler(w http.ResponseWriter, r *http.Request) {
        // Writing formatted data to the response writer
        fmt.Fprintf(w, "Hello, %s!", r.URL.Path[1:])
    }

    func main() {
        http.HandleFunc("/", handler)
        http.ListenAndServe(":8080", nil)
    }
    ```
  - *Testing with curl*
    ```sh
    curl http://localhost:8080/John
    ```


*** Project Organization: Feature-based Approach
- Organizing code based on features or use cases helps in maintaining a clear and modular codebase.
- Each feature or usecase will encapsulated within its own package,
- This will promote a better separation of concerns and reusability.

- *Introduction to Project Organization*
  - *Todolist Feature Organization*
    - For our example, let's consider the todolist feature.
    - We create an `internal/todo` package to contain all related functionality.

- *Handler Functions*
  - Within the `internal/todo` package, we have a `handler.go` file.
  - This file houses all handler functions responsible for handling HTTP requests related to the todolist feature.
  - Later we will use a proper file for each new requirements for the project (db, repos, services, interfaces...)

- *Future Enhancements*
  - While our current handlers are simple functions, we'll turn them into struct methods.
  - This will allow us to encapsulate state as well important dependencies as logging and config related ones.
  - We'll learn how to encapsulate handler logic within structs, allowing us to manage state and dependencies such as logging and configuration more effectively.
